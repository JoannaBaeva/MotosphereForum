@model MotorcycleForum.Web.Models.ForumPostDetailsViewModel

@{
    ViewData["Title"] = Model.Title;
}

<div class="container my-5">
    <div class="card shadow border-0 rounded-3">
        <!-- Card Header -->
        <div class="card-header bg-primary text-white rounded-top-3">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center">
                <h2 class="mb-1 mb-md-0">@Model.Title</h2>
                <div class="text-md-end">
                    <small>
                        <i class="bi bi-person-fill"></i> @Model.CreatorName
                        &nbsp;&nbsp;
                        <i class="bi bi-calendar-event"></i> @Model.CreatedDate.ToString("MMMM dd, yyyy")
                    </small>
                </div>
            </div>
        </div>

        <!-- Card Body -->
        <div class="card-body">
            <p class="card-text lead">@Model.Content</p>
        </div>

        <!-- Card Footer (Voting & Comments) -->
        <div class="card-footer bg-light d-flex justify-content-between align-items-center rounded-bottom-3">
            <!-- Vote Section -->
            <div class="d-flex align-items-center">
                <button id="upvote-btn" class="btn btn-outline-success btn-sm me-2">
                    <i class="bi bi-arrow-up-circle"></i> Upvote
                </button>
                <span id="upvotes-count" class="badge bg-success me-3 fs-6">@Model.Upvotes</span>

                <button id="downvote-btn" class="btn btn-outline-danger btn-sm me-2">
                    <i class="bi bi-arrow-down-circle"></i> Downvote
                </button>
                <span id="downvotes-count" class="badge bg-danger fs-6">@Model.Downvotes</span>
            </div>

            <button id="toggle-comments-btn" class="btn btn-outline-secondary">Show Comments</button>
        </div>

        <!-- Comments Section -->
        <div id="comments-section" class="container my-4" style="display: none;">
            <h3>Comments</h3>

            <div id="comments-list">
                @if (Model.Comments?.Any() ?? false)
                {
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="card my-2 comment-card" data-comment-id="@comment.Id">
                            <div class="card-body">
                                <p class="card-text">@comment.Content</p>
                                <small class="text-muted">By @comment.CreatorName on @comment.CreatedDate.ToString("MMMM dd, yyyy")</small>

                                @if (comment.IsOwner)
                                {
                                    <button class="btn btn-danger btn-sm delete-comment-btn" data-comment-id="@comment.Id">Delete</button>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No comments yet. Be the first to comment!</p>
                }
            </div>

            <!-- Add New Comment -->
            <form id="comment-form" class="mt-3">
                @Html.AntiForgeryToken()
                <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken()" />

                <div class="mb-3">
                    <label for="comment-content" class="form-label">Your Comment:</label>
                    <textarea class="form-control" id="comment-content" rows="3" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Add Comment</button>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const postId = "@Model.Id";
        const commentForm = document.getElementById("comment-form");
        const commentsList = document.getElementById("comments-list");
        const commentsSection = document.getElementById("comments-section");
        const toggleCommentsBtn = document.getElementById("toggle-comments-btn");

        // Handle CSRF Token fetching
        function fetchWithCsrf(url, method, body = null) {
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            return fetch(url, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": csrfToken
                },
                body: body ? JSON.stringify(body) : null
            });
        }

        // Toggle comments visibility
        toggleCommentsBtn.addEventListener("click", function () {
            commentsSection.style.display = commentsSection.style.display === "none" ? "block" : "none";
            this.textContent = commentsSection.style.display === "none" ? "Show Comments" : "Hide Comments";
        });

        // Submit new comment
        commentForm.addEventListener("submit", function (event) {
            event.preventDefault();
            const content = document.getElementById("comment-content").value.trim();

            if (!content) {
                alert("Comment cannot be empty!");
                return;
            }

            fetchWithCsrf("/Forum/AddComment", "POST", { postId, content })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const newComment = document.createElement("div");
                        newComment.classList.add("card", "my-2", "comment-card");
                        newComment.setAttribute("data-comment-id", data.commentId);
                        newComment.innerHTML = `
                            <div class="card-body">
                                <p class="card-text">${content}</p>
                                <small class="text-muted">By You (Just now)</small>
                                <button class="btn btn-danger btn-sm delete-comment-btn" data-comment-id="${data.commentId}">Delete</button>
                            </div>
                        `;
                        commentsList.appendChild(newComment);
                        document.getElementById("comment-content").value = "";
                    } else {
                        alert("Error: " + data.message);
                    }
                });
        });

        // Delete comment using event delegation
        commentsList.addEventListener("click", function (event) {
            if (event.target.classList.contains("delete-comment-btn")) {
                const commentId = event.target.getAttribute("data-comment-id");
                if (!confirm("Are you sure you want to delete this comment?")) return;

                fetchWithCsrf("/Forum/DeleteComment", "POST", { commentId })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.querySelector(`.comment-card[data-comment-id="${commentId}"]`).remove();
                        } else {
                            alert("Error: " + data.message);
                        }
                    });
            }
        });

        // Handle voting
        const upvoteBtn = document.getElementById("upvote-btn");
        const downvoteBtn = document.getElementById("downvote-btn");
        const upvotesCount = document.getElementById("upvotes-count");
        const downvotesCount = document.getElementById("downvotes-count");

        let userVote = null; // Track the user's vote

        // Function to handle votes
        function handleVote(action) {
            fetchWithCsrf(`/Forum/${action}/${postId}`, "POST")
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        upvotesCount.textContent = data.upvotes;
                        downvotesCount.textContent = data.downvotes;

                        if (action === "Upvote") {
                            if (userVote === "upvote") {
                                upvoteBtn.classList.remove();
                                userVote = null; // Remove vote
                            } else {
                                upvoteBtn.classList.add();
                                downvoteBtn.classList.remove();
                                userVote = "upvote";
                            }
                        } else if (action === "Downvote") {
                            if (userVote === "downvote") {
                                downvoteBtn.classList.remove();
                                userVote = null; // Remove vote
                            } else {
                                downvoteBtn.classList.add();
                                upvoteBtn.classList.remove();
                                userVote = "downvote";
                            }
                        }
                    } else {
                        alert("Error: " + data.message);
                    }
                });
        }

        // Add event listeners for voting
        upvoteBtn.addEventListener("click", function () {
            handleVote("Upvote");
        });

        downvoteBtn.addEventListener("click", function () {
            handleVote("Downvote");
        });
    });
</script>

