@model ForumPostDetailsViewModel

@{
    ViewData["Title"] = Model.Title;
}

<div class="container">
    <div class="card shadow-lg border-0 rounded-4">
        <!-- Card Header -->
        <div class="card-header bg-dark text-white rounded-top-4 py-3">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center">
                <h2 class="mb-2 mb-md-0 fw-bold">@Model.Title</h2>
                <div class="text-md-end">
                    <small class="opacity-75">
                        <i class="bi bi-person-circle"></i> @Model.CreatorName
                        &nbsp;&nbsp;
                        <i class="bi bi-calendar-event"></i> @Model.CreatedDate.ToString("MMMM dd, yyyy")
                    </small>
                </div>
            </div>
        </div>

        <!-- Card Body -->
        <div class="card-body bg-light p-4">
            <p class="lead text-dark">@Model.Content</p>
        </div>

        <!-- Card Footer (Voting & Comments) -->
        <div class="card-footer bg-white d-flex justify-content-between align-items-center rounded-bottom-4 px-4 py-3">
            <!-- Vote Section -->
            <div class="d-flex align-items-center">
                <button id="upvote-btn" class="btn btn-outline-success btn-sm me-2">
                    <i class="bi bi-hand-thumbs-up"></i> Upvote
                </button>
                <span id="upvotes-count" class="badge bg-success me-3 fs-6">@Model.Upvotes</span>

                <button id="downvote-btn" class="btn btn-outline-danger btn-sm me-2">
                    <i class="bi bi-hand-thumbs-down"></i> Downvote
                </button>
                <span id="downvotes-count" class="badge bg-danger fs-6">@Model.Downvotes</span>
            </div>

            <button id="toggle-comments-btn" class="btn btn-outline-dark">💬 Show Comments</button>
        </div>

        <!-- Comments Section -->
        <div id="comments-section" class="container my-4 p-3 rounded-4 shadow-sm" style="display: none; background-color: lightgrey">
            <h3 class="mb-3 fw-bold text-primary">Comments</h3>

            <div id="comments-list">
                @if (Model.Comments?.Any() ?? false)
                {
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="card my-2 comment-card" data-comment-id="@comment.Id">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <p class="card-text">@comment.Content</p>
                                        <small class="text-muted">By @comment.CreatorName on @comment.CreatedDate.ToString("MMMM dd, yyyy")</small>
                                    </div>
                                    <div>
                                        <button class="btn btn-sm btn-outline-primary reply-btn" data-comment-id="@comment.Id">
                                            <i class="bi bi-reply"></i> Reply
                                        </button>
                                        @if (comment.IsOwner)
                                        {
                                            <button class="btn btn-danger btn-sm delete-comment-btn" data-comment-id="@comment.Id">
                                                <i class="bi bi-trash3"></i> Delete
                                            </button>
                                        }
                                    </div>
                                </div>

                                <!-- Reply Form (Hidden by Default) -->
                                <form class="reply-form mt-2 d-none" data-parent-id="@comment.Id">
                                    @Html.AntiForgeryToken()
                                    <div class="mb-2">
                                        <textarea class="form-control reply-content" rows="2" placeholder="Write a reply..." required></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-sm btn-success">
                                        <i class="bi bi-send"></i> Submit Reply
                                    </button>
                                </form>

                                <!-- Replies Container -->
                                <div class="replies mt-3 ps-4 border-start">
                                    @if (comment.Replies.Any())
                                    {
                                        @foreach (var reply in comment.Replies) // ✅ Fixed, now using `CommentViewModel`
                                        {
                                            <div class="card my-2 reply-card" data-comment-id="@reply.Id">
                                                <div class="card-body">
                                                    <p class="card-text">@reply.Content</p>
                                                    <small class="text-muted">By @reply.CreatorName on @reply.CreatedDate.ToString("MMMM dd, yyyy")</small>
                                                    @if (reply.IsOwner)
                                                    {
                                                        <button class="btn btn-danger btn-sm delete-comment-btn" data-comment-id="@reply.Id">
                                                            <i class="bi bi-trash3"></i> Delete
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>

                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No comments yet. Be the first to comment!</p>
                }
            </div>

            <!-- Add New Comment -->
            <form id="comment-form" class="mt-3">
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    <label for="comment-content" class="form-label fw-bold">Your Comment:</label>
                    <textarea class="form-control" id="comment-content" rows="3" required></textarea>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-chat-right-dots"></i> Add Comment
                </button>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const postId = "@Model.Id";
        const commentForm = document.getElementById("comment-form");
        const commentsList = document.getElementById("comments-list");
        const commentsSection = document.getElementById("comments-section");
        const toggleCommentsBtn = document.getElementById("toggle-comments-btn");

        // CSRF Token fetch function
        function fetchWithCsrf(url, method, body = null) {
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            return fetch(url, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": csrfToken
                },
                body: body ? JSON.stringify(body) : null
            });
        }

        // Toggle comments visibility
        toggleCommentsBtn.addEventListener("click", function () {
            commentsSection.style.display = commentsSection.style.display === "none" ? "block" : "none";
            this.textContent = commentsSection.style.display === "none" ? "💬 Show Comments" : "Hide Comments";
        });

    // Handle new comment submission
    commentForm.addEventListener("submit", function (event) {
        event.preventDefault();
        const content = document.getElementById("comment-content").value.trim();

        if (!content) {
            alert("Comment cannot be empty!");
            return;
        }

        fetchWithCsrf("/Forum/AddComment", "POST", { postId, content })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const newComment = document.createElement("div");
                    newComment.classList.add("card", "my-2", "comment-card");
                    newComment.setAttribute("data-comment-id", data.commentId);
                    newComment.innerHTML = `
                        <div class="card-body">
                            <p class="card-text">${content}</p>
                            <small class="text-muted">By You (Just now)</small>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <button class="btn btn-sm btn-outline-primary reply-btn" data-comment-id="${data.commentId}">
                                        <i class="bi bi-reply"></i> Reply
                                    </button>
                                    <button class="btn btn-danger btn-sm delete-comment-btn" data-comment-id="${data.commentId}">
                                        <i class="bi bi-trash3"></i> Delete
                                    </button>
                                </div>
                            </div>
                            <div class="replies mt-2"></div>
                            <form class="reply-form d-none mt-2" data-parent-id="${data.commentId}">
                                <textarea class="form-control reply-content" rows="2" placeholder="Write a reply..."></textarea>
                                <button type="submit" class="btn btn-primary btn-sm mt-2">Reply</button>
                            </form>
                        </div>`;
                    commentsList.appendChild(newComment);
                    document.getElementById("comment-content").value = "";
                } else {
                    alert("Error: " + data.message);
                }
            });
    });

        // Handle delete comment, reply toggle, and reply submission
        commentsList.addEventListener("click", function (event) {
            const target = event.target;

            // Delete comment
            if (target.classList.contains("delete-comment-btn")) {
                const commentId = target.getAttribute("data-comment-id");
                if (!confirm("Are you sure you want to delete this comment?")) return;

                fetchWithCsrf("/Forum/DeleteComment", "POST", { commentId })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.querySelector(`.comment-card[data-comment-id="${commentId}"]`).remove();
                        } else {
                            alert("Error: " + data.message);
                        }
                    });
            }

            // Toggle reply form
            if (target.classList.contains("reply-btn")) {
                const parentId = target.getAttribute("data-comment-id");
                const replyForm = document.querySelector(`form[data-parent-id='${parentId}']`);
                replyForm.classList.toggle("d-none");
            }
        });

    // Handle reply form submission
    commentsList.addEventListener("submit", function (event) {
        if (event.target.classList.contains("reply-form")) {
            event.preventDefault();

            const parentId = event.target.getAttribute("data-parent-id");
            const content = event.target.querySelector(".reply-content").value.trim();

            if (!content) {
                alert("Reply cannot be empty!");
                return;
            }

            fetchWithCsrf("/Forum/ReplyToComment", "POST", {
                postId: postId,
                parentCommentId: parentId,
                content: content
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const repliesContainer = document.querySelector(`.comment-card[data-comment-id='${parentId}'] .replies`);
                        repliesContainer.innerHTML += `
                            <div class="card my-2 reply-card" data-comment-id="${data.replyId}">
                                <div class="card-body">
                                    <p class="card-text">${content}</p>
                                    <small class="text-muted">By You (Just now)</small>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button class="btn btn-danger btn-sm delete-comment-btn" data-comment-id="${data.replyId}">
                                            <i class="bi bi-trash3"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>`;
                        event.target.querySelector(".reply-content").value = ""; // Clear input
                        event.target.classList.add("d-none"); // Hide form
                    }
                })
                .catch(error => console.error("Error submitting reply:", error));
        }
    });
        // Handle voting
        const upvoteBtn = document.getElementById("upvote-btn");
        const downvoteBtn = document.getElementById("downvote-btn");
        const upvotesCount = document.getElementById("upvotes-count");
        const downvotesCount = document.getElementById("downvotes-count");

        let userVote = null; // Track the user's vote

        function handleVote(action) {
            fetchWithCsrf(`/Forum/${action}/${postId}`, "POST")
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        upvotesCount.textContent = data.upvotes;
                        downvotesCount.textContent = data.downvotes;

                        if (action === "Upvote") {
                            if (userVote === "upvote") {
                                upvoteBtn.classList.remove("active");
                                userVote = null;
                            } else {
                                upvoteBtn.classList.add("active");
                                downvoteBtn.classList.remove("active");
                                userVote = "upvote";
                            }
                        } else if (action === "Downvote") {
                            if (userVote === "downvote") {
                                downvoteBtn.classList.remove("active");
                                userVote = null;
                            } else {
                                downvoteBtn.classList.add("active");
                                upvoteBtn.classList.remove("active");
                                userVote = "downvote";
                            }
                        }
                    } else {
                        alert("Error: " + data.message);
                    }
                });
        }

        // Add event listeners for voting
        upvoteBtn.addEventListener("click", function () {
            handleVote("Upvote");
        });

        downvoteBtn.addEventListener("click", function () {
            handleVote("Downvote");
        });
    });
</script>


<style>
    .comment-card {
        transition: all 0.3s ease-in-out;
    }

        .comment-card:hover {
            transform: scale(1.02);
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
        }

        #upvote-btn, #downvote-btn {
            transition: 0.3s ease-in-out;
        }

        #upvote-btn:hover {
            background-color: #28a745 !important;
            color: white !important;
        }

        #downvote-btn:hover {
            background-color: #dc3545 !important;
            color: white !important;
        }

        #toggle-comments-btn {
            transition: 0.3s ease-in-out;
        }

        #toggle-comments-btn:hover {
            background-color: #6c757d !important;
            color: white !important;
        }
</style>