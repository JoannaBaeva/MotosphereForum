// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorcycleForum.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotorcycleForum.Data.Migrations
{
    [DbContext(typeof(MotorcycleForumDbContext))]
    [Migration("20250522221051_InitPostgres")]
    partial class InitPostgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("711392e6-c020-463d-8a42-01ef90dd6273"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("39727667-1f7b-488f-8560-1e2942777b94"),
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = new Guid("f15bf949-9c6b-4b98-a6f8-6c4a1c7607b5"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f23a5f6d-1c7b-4a5b-97eb-08dbf6a6c3f8"),
                            RoleId = new Guid("f15bf949-9c6b-4b98-a6f8-6c4a1c7607b5")
                        },
                        new
                        {
                            UserId = new Guid("0ab81baf-1cdd-42cd-8d11-391f5118558e"),
                            RoleId = new Guid("39727667-1f7b-488f-8560-1e2942777b94")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.BannedEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BannedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BannedEmails");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Event_Tracker.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("6fe266bb-545f-45e3-a66c-ecad09f96171"),
                            CategoryId = new Guid("9eae427f-4376-493b-a662-c1060dc6d30b"),
                            CreatedDate = new DateTime(2025, 4, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Join us for a big spring motorcycle meetup at the central park!",
                            EventDate = new DateTime(2025, 11, 19, 13, 0, 0, 0, DateTimeKind.Utc),
                            IsApproved = true,
                            Location = "Central Park, NY",
                            OrganizerId = new Guid("f23a5f6d-1c7b-4a5b-97eb-08dbf6a6c3f8"),
                            Title = "Spring Motorcycle Meetup"
                        },
                        new
                        {
                            EventId = new Guid("bd60185f-e537-4409-8d8a-956f23f0c76a"),
                            CategoryId = new Guid("85a66af6-084e-46ed-beb4-9b3062b17dc6"),
                            CreatedDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn the basics of motorcycle maintenance and repair from experienced mechanics!",
                            EventDate = new DateTime(2025, 4, 2, 11, 30, 0, 0, DateTimeKind.Utc),
                            IsApproved = true,
                            Location = "Sofia Tech Park",
                            OrganizerId = new Guid("0ab81baf-1cdd-42cd-8d11-391f5118558e"),
                            Title = "Motorcycle Maintenance Workshop"
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Event_Tracker.EventCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("EventCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("9eae427f-4376-493b-a662-c1060dc6d30b"),
                            Name = "Motorcycle Show"
                        },
                        new
                        {
                            CategoryId = new Guid("85a66af6-084e-46ed-beb4-9b3062b17dc6"),
                            Name = "Workshop"
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Event_Tracker.EventParticipant", b =>
                {
                    b.Property<Guid>("EventParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("EventParticipantId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ForumPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.HasKey("CommentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = new Guid("be4ccd71-8576-4378-8b7f-d943f17d19bb"),
                            AuthorId = new Guid("f23a5f6d-1c7b-4a5b-97eb-08dbf6a6c3f8"),
                            Content = "<3",
                            CreatedDate = new DateTime(2025, 5, 22, 22, 10, 50, 307, DateTimeKind.Utc).AddTicks(4776),
                            ForumPostId = new Guid("c6e5b16e-53f5-41c9-87cd-66da7a096b4a")
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.ForumPost", b =>
                {
                    b.Property<Guid>("ForumPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Downvotes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("Upvotes")
                        .HasColumnType("integer");

                    b.HasKey("ForumPostId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("ForumPosts");

                    b.HasData(
                        new
                        {
                            ForumPostId = new Guid("c6e5b16e-53f5-41c9-87cd-66da7a096b4a"),
                            AuthorId = new Guid("f23a5f6d-1c7b-4a5b-97eb-08dbf6a6c3f8"),
                            Content = "Hello and welcome to our vibrant community of motorcycle enthusiasts! Whether you're a seasoned rider or just starting out, this is the place to connect, share, and learn from one another.\r\n\r\nHere, you can:\r\n\r\nDiscuss your favorite rides and events 🌍\r\nGet advice on bike builds, maintenance, and repairs 🔧\r\nShare your passion for gear, accessories, and everything in between 🧰\r\nBuy, sell, or trade motorcycles and gear in the Marketplace 🏷️\r\nWe encourage respectful and engaging conversations, so please follow the forum guidelines to ensure a positive experience for everyone.\r\n\r\nWe're excited to have you here! Feel free to introduce yourself, ask questions, and dive into the discussions. Let’s keep the wheels rolling and make this the best community for motorcyclists!\r\n\r\nRide safe,\r\nThe Motosphere Team",
                            CreatedDate = new DateTime(2025, 5, 22, 22, 10, 50, 307, DateTimeKind.Utc).AddTicks(4754),
                            Downvotes = 0,
                            Title = "Welcome to the Motosphere Forum! 🏍️",
                            TopicId = 1,
                            Upvotes = 0
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.ForumPostImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForumPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ImageId");

                    b.HasIndex("ForumPostId");

                    b.ToTable("ForumPostImages");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.ForumTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TopicId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TopicId");

                    b.ToTable("ForumTopics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            Title = "General Discussion"
                        },
                        new
                        {
                            TopicId = 2,
                            Title = "Motorcycle Maintenance & Repair"
                        },
                        new
                        {
                            TopicId = 3,
                            Title = "Gear & Accessories"
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ForumPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("VoteType")
                        .HasColumnType("integer");

                    b.HasKey("VoteId");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Marketplace.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("d5b06706-b7ed-4252-a257-57b6c4117968"),
                            Name = "Tires & Wheels"
                        },
                        new
                        {
                            CategoryId = new Guid("34080d33-7073-48ae-87ee-03c8990ff696"),
                            Name = "Parts & Accessories"
                        },
                        new
                        {
                            CategoryId = new Guid("f816c9f1-8132-4a1d-b78d-7370b79500b8"),
                            Name = "Motorcycles for Sale"
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Marketplace.MarketplaceListing", b =>
                {
                    b.Property<Guid>("ListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("SellerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ListingId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("MarketplaceListings");

                    b.HasData(
                        new
                        {
                            ListingId = new Guid("efcc8a05-65a5-4cb3-859c-ccfc3e6a23bc"),
                            CategoryId = new Guid("d5b06706-b7ed-4252-a257-57b6c4117968"),
                            CreatedDate = new DateTime(2025, 4, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "High-quality road tires for sport-touring motorcycles, excellent grip and durability.",
                            IsActive = true,
                            Location = "Varna",
                            Price = 300.00m,
                            SellerId = new Guid("f23a5f6d-1c7b-4a5b-97eb-08dbf6a6c3f8"),
                            SellerPhoneNumber = "1111111111",
                            Title = "Michelin Road 6 Tires Set"
                        },
                        new
                        {
                            ListingId = new Guid("7998740b-406d-4504-b9df-5f8aef508054"),
                            CategoryId = new Guid("34080d33-7073-48ae-87ee-03c8990ff696"),
                            CreatedDate = new DateTime(2025, 4, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Lightweight, performance-enhancing titanium slip-on exhaust. Fits most sport bikes. Used but in excellent condition. That signature growl? Yeah, it's got it.",
                            IsActive = true,
                            Location = "Sofia",
                            Price = 780.00m,
                            SellerId = new Guid("f23a5f6d-1c7b-4a5b-97eb-08dbf6a6c3f8"),
                            SellerPhoneNumber = "1111111111",
                            Title = "Akrapovič Titanium Slip-On Exhaust"
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Marketplace.MarketplaceListingImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.HasKey("ImageId");

                    b.HasIndex("ListingId");

                    b.ToTable("MarketplaceListingImages");

                    b.HasData(
                        new
                        {
                            ImageId = new Guid("773c3fca-dd0e-4290-9d2d-b7cd20fbeb64"),
                            ImageUrl = "https://motosphere-images.s3.eu-north-1.amazonaws.com/marketplace/seed-images/michelin-tires-6.png",
                            ListingId = new Guid("efcc8a05-65a5-4cb3-859c-ccfc3e6a23bc")
                        },
                        new
                        {
                            ImageId = new Guid("5c21520e-f319-4981-b9ae-80459c97872c"),
                            ImageUrl = "https://motosphere-images.s3.eu-north-1.amazonaws.com/marketplace/seed-images/michelin-tires-6-2.png",
                            ListingId = new Guid("efcc8a05-65a5-4cb3-859c-ccfc3e6a23bc")
                        },
                        new
                        {
                            ImageId = new Guid("bb80c17e-4883-4d2f-a6e6-02cb9b601148"),
                            ImageUrl = "https://motosphere-images.s3.eu-north-1.amazonaws.com/marketplace/seed-images/Exaust.png",
                            ListingId = new Guid("7998740b-406d-4504-b9df-5f8aef508054")
                        });
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f23a5f6d-1c7b-4a5b-97eb-08dbf6a6c3f8"),
                            AccessFailedCount = 0,
                            Bio = "I’m the MotosphereAdmin – CEO of \"It Worked on My Machine™\"\r\n😩 I code.\r\n🔫 I moderate.\r\n☕ I run on caffeine, sarcasm, and the tears of broken builds.\r\n\r\nBuilt this place so motorcyclists could post bikes, flex mods, and yell about oil brands in peace.\r\nIf something’s broken, I probably caused it. If it works, you're welcome.\r\nIf you spam, I will smite you with the Ban Hammer™ 🔨🔥\r\n\r\nBasically the final boss of this site. Proceed accordingly.",
                            ConcurrencyStamp = "e1cb31c4-fcd4-47d7-b1cb-9c7e9edcdd70",
                            Email = "motosphere.site@gmail.com",
                            EmailConfirmed = true,
                            FullName = "MotosphereAdmin",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOTOSPHERE.SITE@GMAIL.COM",
                            NormalizedUserName = "MOTOSPHERE.SITE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuWYIdgIxkUUCt5csGiqPiHyIdCSkLWUYZapZJt4A3oHJvIU5ZL/uc7MDB5DXs4Mg==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://motosphere-images.s3.eu-north-1.amazonaws.com/marketplace/seed-images/logo.png",
                            RegistrationDate = new DateTime(2025, 5, 22, 22, 10, 50, 307, DateTimeKind.Utc).AddTicks(4295),
                            SecurityStamp = "2f3c8b65-12af-4b6d-bda9-8ec3d8651d3a",
                            TwoFactorEnabled = false,
                            UserName = "motosphere.site@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("0ab81baf-1cdd-42cd-8d11-391f5118558e"),
                            AccessFailedCount = 0,
                            Bio = "Moderating this place so you don’t have to.\nProbably asleep. Probably judging your post.\nIf it got removed, it deserved it.\nI don't make the rules. Actually, I kinda do.",
                            ConcurrencyStamp = "e182eb5b-2197-4216-87f3-6be9ba6bddc1",
                            Email = "joannasofia7@gmail.com",
                            EmailConfirmed = true,
                            FullName = "JoannaMod",
                            IsBanned = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOANNASOFIA7@GMAIL.COM",
                            NormalizedUserName = "JOANNASOFIA7@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL48ILOb5KeNvfj9rFc1Zaj5+r1ZaA8/gvyxtik5bWH4JZ5us+YaW3nWwSEGdRnxQA==",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://motosphere-images.s3.eu-north-1.amazonaws.com/profiles/cat-profile-pic.jpg",
                            RegistrationDate = new DateTime(2025, 5, 22, 22, 10, 50, 307, DateTimeKind.Utc).AddTicks(4425),
                            SecurityStamp = "17dd75f7-5070-4fca-b271-d481b06ada44",
                            TwoFactorEnabled = false,
                            UserName = "joannasofia7@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorcycleForum.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Event_Tracker.Event", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.Event_Tracker.EventCategory", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorcycleForum.Data.Entities.User", "Organizer")
                        .WithMany("OrganizedEvents")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Event_Tracker.EventParticipant", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.Event_Tracker.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId");

                    b.HasOne("MotorcycleForum.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.Comment", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorcycleForum.Data.Entities.Forum.ForumPost", "ForumPost")
                        .WithMany("Comments")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorcycleForum.Data.Entities.Forum.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("Author");

                    b.Navigation("ForumPost");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.ForumPost", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.User", "Author")
                        .WithMany("ForumPosts")
                        .HasForeignKey("AuthorId");

                    b.HasOne("MotorcycleForum.Data.Entities.Forum.ForumTopic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.ForumPostImage", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.Forum.ForumPost", null)
                        .WithMany("Images")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.Vote", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.Forum.ForumPost", "ForumPost")
                        .WithMany("Votes")
                        .HasForeignKey("ForumPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorcycleForum.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Marketplace.MarketplaceListing", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.Marketplace.Category", "Category")
                        .WithMany("MarketplaceListings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorcycleForum.Data.Entities.User", "Seller")
                        .WithMany("MarketplaceListings")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Marketplace.MarketplaceListingImage", b =>
                {
                    b.HasOne("MotorcycleForum.Data.Entities.Marketplace.MarketplaceListing", "Listing")
                        .WithMany("Images")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Event_Tracker.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Event_Tracker.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Forum.ForumPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Marketplace.Category", b =>
                {
                    b.Navigation("MarketplaceListings");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.Marketplace.MarketplaceListing", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("MotorcycleForum.Data.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ForumPosts");

                    b.Navigation("MarketplaceListings");

                    b.Navigation("OrganizedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
